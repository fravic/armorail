package septenary.duelparty {	import come.greensock.TweenLite;		public class BlackTransition extends Screen {				public function BlackTransition() {		}				public function transition(inShape:String, outShape:String):void {			const transTime:Number = 1;			var blacknessaddBlacknessWithMask(inShape);			TweenLite.to(inMask, transTime, {scaleX:0, scaleY:0, onComplete:transitionInDone, onCompleteParams:[outShape]});		}				protected function addBlacknessWithMask(shape:String):MovieClip {			var inMask:MovieClip = Utilities.classInstanceFromString(inShape);			var blackness:MovieClip = new Blackness();			blackness.width = DuelParty.stageWidth;			blackness.height = DuelParty.stageHeight;			blackness.mask = invertAndAddMask(inMask);			addChild(blackness);			addChild(blackness.mask);		}				protected function transitionInDone(outShape:String):void {			const transTime:Number = 1;			addBlacknessWithMask(outShape);			TweenLite.to(o, transTime, {scaleX:0, scaleY:0, onComplete:transitionInDone, onCompleteParams:[outShape]});		}				protected function transitionOutDone():void {		}				protected function invertAndAddMask(mc:MovieClip):MovieClip {			var bitmapData:BitmapData = new BitmapData(DuelParty.stageWidth, DuelParty.stageHeight, true, 0xFFFFFFFF);			var invert:ColorTransform = new ColorTransform(0,0,0,1);			var matrix:Matrix = new Matrix();			matrix.translate(mc.x, mc.y);			bitmapData.draw(mc, matrix, invert);			bitmapData.threshold(bitmapData, new Rectangle(0,0,bitmapData.width,bitmapData.height),								 new Point(0,0), "<", 0xFFFFFFFF, 0x00FF0000);						var bitmap:Bitmap = new Bitmap(bitmapData);			var maskMC:MovieClip = new MovieClip();			maskMC.addChild(bitmap);			maskMC.cacheAsBitmap = true;			maskMC.visible = false;			return maskMC;		}	}}