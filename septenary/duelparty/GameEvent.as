package septenary.duelparty {	import flash.events.Event;    import flash.display.MovieClip;    import flash.utils.Dictionary;	public class GameEvent extends Event {        public static const ACTION_COMPLETE:String = "action_complete";        public static const SCREEN_TRANSITIONED:String = "screen_transitioned";        public static const GAME_BOARD_LOADED:String = "game_board_loaded";		public static const START_TURN:String = "start_turn";		public static const END_TURN:String = "end_turn";        public static const DAMAGE_DONE:String = "damage_done";        public static const BATTLE_FINISHED:String = "battle_finished";		public static const FIGHTER_DIED:String = "fighter_died";		public static const PLAYER_DIED:String = "player_died";        public static const PROJECTILE_DIED:String = "projectile_died";        public static const PLAYER_COINS_MODIFIED:String = "player_coins_modified";        public static const MOVEMENT_TILE_ACTIVATION:String = "movement_tile_activation";        public static const MOVEMENT_DEPARTED_TILE:String = "movement_departed_tile";        public static const MOVEMENT_ARRIVED_AT_TILE:String = "movement_arrived_at_tile";        public static const MOVEMENT_REQUEST_NEXT_TILE:String = "movement_request_next_tile";        public static const MOVEMENT_ENEMY_ENCOUNTERED:String = "movement_enemy_encountered";        public static const MOVEMENT_ENDED:String = "movement_ended";        public static const TILE_RESIDENT_ARRIVED:String = "tile_resident_arrived";        public static const TILE_RESIDENT_DEPARTED:String = "tile_resident_departed";                public static const ANIM_INTERNAL_COMPLETE:String = "anim_internal_complete";        protected static var _callbacksByObjAndType:Dictionary = new Dictionary();        protected static var _numListenersOnObj:Dictionary = new Dictionary();        protected static var _animDoneFramesByObj:Dictionary = new Dictionary();		protected var _data:Object;		public function get data():Object {			return _data;		}        protected static function animDoneListenerFrame(e:Event):void {            var anim:MovieClip = e.target as MovieClip;            for (var i:int = 0; i < _animDoneFramesByObj[anim].length; i++) {                var frame:* = _animDoneFramesByObj[anim][i].frame;                if (anim.currentFrame == frame || anim.currentLabel == frame) {                    GameEvent.addOneTimeEventListener(anim, GameEvent.ANIM_INTERNAL_COMPLETE,                                                      _animDoneFramesByObj[anim][i].callback);                    anim.dispatchEvent(new GameEvent(GameEvent.ANIM_INTERNAL_COMPLETE, {frame:frame}));                    _animDoneFramesByObj[anim].splice(i, 1);                    if (_animDoneFramesByObj[anim].length <= 0) {                        anim.removeEventListener(Event.ENTER_FRAME, animDoneListenerFrame);                        delete _animDoneFramesByObj[anim];                        return;                    }                }            }        }        public static function addAnimFrameListener(obj:MovieClip, callback:Function, frame:*=null):void {            if (frame == null) frame = obj.totalFrames;            if (!_animDoneFramesByObj[obj]) {                _animDoneFramesByObj[obj] = new Array();            }            _animDoneFramesByObj[obj].push({frame:frame, callback:callback});            obj.addEventListener(Event.ENTER_FRAME, animDoneListenerFrame, false, 0, true);        }        public static function addOneTimeEventListener(obj:Object, type:String, callback:Function):void {            if (!_callbacksByObjAndType[obj]) {                _callbacksByObjAndType[obj] = new Dictionary();                _numListenersOnObj[obj] = 0;            }            if (!_callbacksByObjAndType[obj][type]) {                _callbacksByObjAndType[obj][type] = new Array();            }            obj.addEventListener(type, oneTimeEventListener, false, 0, true);            _callbacksByObjAndType[obj][type].push(callback);            _numListenersOnObj[obj]++;        }        protected static function oneTimeEventListener(e:Event):void {            var callbacks:Array = _callbacksByObjAndType[e.target][e.type];            //Delete the callbacks before calling them to avoid a possible stack overflow            delete _callbacksByObjAndType[e.target][e.type];            _numListenersOnObj[e.target]--;            if (_numListenersOnObj[e.target] <= 0) {                delete _numListenersOnObj[e.target];                delete _callbacksByObjAndType[e.target];            }                        for (var i:int = 0; i < callbacks.length; i++) {                e.target.removeEventListener(e.type, oneTimeEventListener);                callbacks[i](e);            }        }				public function GameEvent(type:String, data:Object=null) {			_data = data;			super(type, false, false);		}	}}