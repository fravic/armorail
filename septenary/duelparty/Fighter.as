package septenary.duelparty {	import flash.display.Sprite;    import flash.geom.Rectangle;    import flash.geom.Point;	public class Fighter extends Sprite {		protected var _fighterName:String = "";		protected var _attack:int = 0;		protected var _counter:int = 0;		protected var _health:int = 0;		protected var _specialDesc:String = "";		protected var _cost:int = 0;        protected var _bountyCoins:int = 10;        protected var _upkeepPerAttack:int = 2;        protected var _upkeepPerCounter:int = 1;        protected var _upkeepPerHealth:int = 1;        protected var _movement:FightableMovement;		protected var _attackBehaviour:Function;        public function get fighterName():String {			return _fighterName;		}        public function set fighterName(value:String):void {            _fighterName = value;        }        public function get attack():int {			return _attack;		}        public function set attack(value:int):void {            _attack = value;        }        public function get counter():int {			return _counter;		}        public function set counter(value:int):void {            _counter = value;        }        public function get health():int {			return _health;		}        public function set health(value:int):void {            _health = value;        }		public function get specialDesc():String {			return _specialDesc;		}        public function set specialDesc(value:String) {            _specialDesc = value;        }		public function get cost():int {			return _cost;		}        public function get upkeep():int {            return _upkeepPerAttack * _attack + _upkeepPerCounter * _counter + _upkeepPerHealth * _health;        }        public function get bountyCoins():int {            return _bountyCoins;        }        public function set bountyCoins(value:int):void {            _bountyCoins = value;        }		public function set attackBehaviour(value:Function):void {			_attackBehaviour = value;		}		public override function set rotation(value:Number):void {			wheels.rotation = value;			weapon.rotation = value;		}		public override function get rotation():Number {			return wheels.rotation;		}        public function get movement():FightableMovement {            return _movement;        }                public function Fighter() {			super();            _movement = new FightableMovement(this);		}                public function setUpkeepRatios(perAttack, perCounter, perHealth):void {            _upkeepPerAttack = perAttack;            _upkeepPerCounter = perCounter;            _upkeepPerHealth = perHealth;        }				public function damageFighter(damage:int):void {			_health -= damage;			if (_health <= 0) {                _health = 0;				kill();			}            GUIAnimationFactory.createAndAddAnimation(GUIAnimationFactory.DAMAGE_NOTIFICATION,                                                new Point(this.x, this.y), {damage:damage}, damageDone);		}        protected function damageDone(e:GameEvent=null):void {            dispatchEvent(new GameEvent(GameEvent.DAMAGE_DONE));        }		public function kill():void {            dispatchEvent(new GameEvent(GameEvent.FIGHTER_DIED, this));		}				public function attackAnim(targFightmaster:Fightmaster, attackFront:Boolean):void {			_attackBehaviour(this, targFightmaster, attackFront, attackAnimDone);		}				protected function attackAnimDone():void {			dispatchEvent(new GameEvent(GameEvent.ACTION_COMPLETE));		}	}}