package septenary.duelparty {    import flash.display.MovieClip;    import com.greensock.TweenLite;    public class BoardIntro extends Screen {        protected static const RAIL_SIZE:Number = 100;        protected static const RAIL_SPEED:Number = 81;        protected var _railAnims:Array = new Array();        public function BoardIntro(boardInfo:Object) {            super();            _alwaysOnTop = true;            GameScreen.getGameScreen().darken();            startBoardIntro(boardInfo);        }        public override function update():void {            for (var i:int = 0; i < _railAnims.length; i++) {                updateRailwayAnim(_railAnims[i]);            }            super.update();        }        protected function startBoardIntro(boardInfo:Object):void {            const textFadeTime:Number = 2;            const animY:Number = 225;                        if (boardInfo.boardName) titleText.lblBoardName.text = boardInfo.boardName;            else titleText.lblBoardName.text = "Untitled Board";            titleText.alpha = 0;            TweenLite.to(titleText, textFadeTime, {alpha:1});            function boardIntroDone():void {                removeChild(titleText);                dispatchEvent(new GameEvent(GameEvent.ACTION_COMPLETE));            }            function boardIntroBGDone(e:GameEvent):void {                removeChild(boardBG);                TweenLite.to(titleText, textFadeTime, {alpha:0, onComplete:boardIntroDone});            }            GameEvent.addAnimFrameListener(boardBG, boardIntroBGDone);            var anim:MovieClip = continuousRailwayAnim(true);            anim.y = animY;            addChild(anim);        }        protected function continuousRailwayAnim(horizontal:Boolean=false):MovieClip {            const railBuffer:int = 2;            var anim:MovieClip = new MovieClip();            var numParts:int = !horizontal ? (int)(DuelParty.stageHeight/RAIL_SIZE) + railBuffer :                                             (int)(DuelParty.stageWidth/RAIL_SIZE) + railBuffer;            for (var i:int = 0; i < numParts; i++) {                var part:RailComponentGold = new RailComponentGold();                if (!horizontal){                    part.rotation = 90;                    part.height = RAIL_SIZE;                    part.scaleX = part.scaleY;                    part.y = -RAIL_SPEED + RAIL_SIZE * i + RAIL_SIZE/2;                } else {                    part.x = -RAIL_SPEED + RAIL_SIZE * i + RAIL_SIZE/2;                    part.width = RAIL_SIZE;                    part.scaleY = part.scaleX;                }                anim.addChild(part);            }            _railAnims.push(anim);            return anim;        }        protected function updateRailwayAnim(anim:MovieClip):void {            var horizontal:Boolean = false;            if (anim.height < anim.width) horizontal = true;            var totalSize:Number = RAIL_SIZE * anim.numChildren;            for (var i:int = 0; i < anim.numChildren; i++) {                var part:MovieClip = anim.getChildAt(i) as MovieClip;                if (!horizontal) {                    part.y += RAIL_SPEED;                    if (part.y > DuelParty.stageHeight) {                        part.y -= totalSize;                    }                } else {                    part.x += RAIL_SPEED;                    if (part.x > DuelParty.stageWidth) {                        part.x -= totalSize;                    }                }            }        }    }}