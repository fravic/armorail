package septenary.duelparty {    import flash.display.Sprite;    import flash.utils.setTimeout;    import flash.utils.getQualifiedClassName;    import flash.geom.Point;    import com.greensock.TweenLite;    public class BattleScreen extends Screen {        protected static const ZOOM_SCALE:Number = 2.0;        protected var _battleManager:BattleManager;        protected var _fightContainer:Sprite = new Sprite();                protected var _attackerDups:Object = new Object();        protected var _defenderDups:Object = new Object();        protected var _defenderOnFront:Boolean = true;        public function BattleScreen(battleManager:BattleManager) {            super();            _battleManager = battleManager;            GUIAnimationFactory.setActiveScreen(this);            this.visible = false;            addChild(_fightContainer);        }        public function closeBattleScreen():void {                              GUIAnimationFactory.setActiveScreen(GameScreen.getGameScreen());            transitionFromBattleScreen();        }        public function setupBattle(attacker:Fightmaster, defender:Fightmaster, defenderOnFront:Boolean):void {            const transitionDelay:Number = 0.7 * 1000;            _defenderOnFront = defenderOnFront;            //Duplicate and add both the attacker and defender            duplicateMaster(attacker, true);            duplicateMaster(defender, false);            addDuplicateMaster(true);            addDuplicateMaster(false);            setTimeout(transitionFromGameBoard, transitionDelay);        }        protected function duplicateMaster(master:Fightmaster, asAttacker:Boolean):void {            var newMaster:Sprite3D = Utilities.classInstanceFromString(getQualifiedClassName(master.getDisplay()));            newMaster.scaleX = newMaster.scaleY = ZOOM_SCALE;            if (asAttacker) _attackerDups.master = newMaster;            else _defenderDups.master = newMaster;            if (master.getForeGuard() != null) {                duplicateFighter(master.getForeGuard(), asAttacker);            }            if (master.getRearGuard() != null) {                duplicateFighter(master.getRearGuard(), asAttacker);            }        }        protected function duplicateFighter(fighter:Fighter, asAttacker:Boolean):void {            var newFighter:Fighter = FighterFactory["new" + getQualifiedClassName(fighter)]();            newFighter.field = _fightContainer;            newFighter.scaleX = newFighter.scaleY = ZOOM_SCALE;            asAttacker ? _attackerDups.foreGuard = newFighter : _defenderDups.foreGuard = newFighter;        }        protected function addDuplicateMaster(asAttacker:Boolean):void {            const masterXFromCenter:Number = 320;            const masterYFromCenter:Number = 162;            const masterRotation:Number = 45;            Utilities.assert(_attackerDups.master != null, "Attack master cannot be null!");            Utilities.assert(_defenderDups.master != null, "Defender master cannot be null!");            var dups:Object;            if (asAttacker) {                dups = _attackerDups;                dups.master.x = DuelParty.stageWidth/2 - masterXFromCenter;                dups.master.y = DuelParty.stageHeight/2 - masterYFromCenter;            } else {                dups = _defenderDups;                _defenderDups.master.x = DuelParty.stageWidth/2 + masterXFromCenter;                _defenderDups.master.y = DuelParty.stageHeight/2 + masterYFromCenter;            }            dups.master.rotation = masterRotation;            _fightContainer.addChild(dups.master);            if (dups.foreGuard) addDuplicateFighter(asAttacker, true);            if (dups.rearGuard) addDuplicateFighter(asAttacker, false);        }        protected function addDuplicateFighter(asAttacker:Boolean, inFront:Boolean):void {            const fighterOffsetX:Number = 95;               const fighterOffsetY:Number = 60;            const fighterRotation:Number = 45;            var dups:Object = asAttacker ? _attackerDups : _defenderDups;            var fighter:Fighter = inFront ? dups.foreGuard : dups.rearGuard;            var rightOfMaster:Boolean;            if (asAttacker) rightOfMaster = inFront;            else rightOfMaster = !_defenderOnFront == inFront;            fighter.x =  (asAttacker ? _attackerDups.master.x : _defenderDups.master.x)                       + (rightOfMaster ? fighterOffsetX : -fighterOffsetX);            fighter.y =  (asAttacker ? _attackerDups.master.y : _defenderDups.master.y)                       + (rightOfMaster ? fighterOffsetY : -fighterOffsetY);            fighter.rotation = asAttacker || (!asAttacker && !_defenderOnFront) ?                               fighterRotation : 180 + fighterRotation;            addChild(fighter);        }        protected function transitionFromGameBoard():void {            this.visible = false;            BlackTransition.getBlackTransition().setMasked(GameBoard.getGameBoard());            GameEvent.addOneTimeEventListener(BlackTransition.getBlackTransition(), GameEvent.SCREEN_TRANSITIONED,                                              transitionToBattleScreen);            GameEvent.addOneTimeEventListener(BlackTransition.getBlackTransition(), GameEvent.ACTION_COMPLETE,                                              battleSetupDone);            BlackTransition.getBlackTransition().transition(BlackTransition.TRANSITION_SHAPE_CIRCLE,                                                            BlackTransition.TRANSITION_SHAPE_CIRCLE, 10, 350);            GameInterface.getGameInterface().hidePlayerInterfaces();        }        protected function transitionToBattleScreen(e:GameEvent):void {            BlackTransition.getBlackTransition().setMasked(this);            this.visible = true;            GameBoard.getGameBoard().visible = false;        }        protected function transitionFromBattleScreen():void {            BlackTransition.getBlackTransition().setMasked(this);            GameEvent.addOneTimeEventListener(BlackTransition.getBlackTransition(), GameEvent.SCREEN_TRANSITIONED,                                              transitionToGameBoard);            GameEvent.addOneTimeEventListener(BlackTransition.getBlackTransition(), GameEvent.ACTION_COMPLETE,                                              battleScreenClosed);            BlackTransition.getBlackTransition().transition(BlackTransition.TRANSITION_SHAPE_CIRCLE,                                                            BlackTransition.TRANSITION_SHAPE_CIRCLE, 10, 350);        }        protected function transitionToGameBoard(e:GameEvent):void {            BlackTransition.getBlackTransition().setMasked(GameBoard.getGameBoard());            GameInterface.getGameInterface().showPlayerInterfaces();            this.visible = false;            GameBoard.getGameBoard().visible = true;        }        protected function battleSetupDone(e:GameEvent=null):void {            dispatchEvent(new GameEvent(GameEvent.ACTION_COMPLETE));        }        protected function battleScreenClosed(e:GameEvent=null):void {            dispatchEvent(new GameEvent(GameEvent.ACTION_COMPLETE));        }        public function startFight():void {            //TODO: Make it so that the fighters only attack when player commands them to            fighterAttack();        }        protected function fighterAttack():void {            GameEvent.addOneTimeEventListener(_attackerDups.foreGuard, GameEvent.ACTION_COMPLETE, fighterAttackEnded);			_attackerDups.foreGuard.attackAnim(_defenderDups, _defenderOnFront);        }        protected function fighterAttackEnded(e:GameEvent=null):void {            dispatchEvent(new GameEvent(GameEvent.ACTION_COMPLETE));        }        public override function addGUIAnimation(anim:Sprite):void {            super.addGUIAnimation(anim);        }        public override function gainedFocus():void {			super.gainedFocus();		}				public override function lostFocus():void {			super.lostFocus();		}    }}