package septenary.duelparty {    import septenary.duelparty.pmovement.*;    import flash.display.Sprite;    import flash.display.MovieClip;    import flash.geom.Point;    public class Projectile extends Sprite {        protected var _movementBehaviour:MovementBehaviour;        protected var _startPt:Point;        protected var _endPt:Point;        protected var _spriteClip:MovieClip;        protected var _trailClipClass:String;        protected var _deathClipClass:String;        protected var _trailStep:int = 1;        protected var _lifeSpan:int = int.MAX_VALUE;        protected var _dead:Boolean = false;        protected var _group:Object;        protected var _field:Sprite;        private var _birthTime:int = 0;        private var _lastTrail:int = 0;        public function set movementBehaviour(value:MovementBehaviour):void {            _movementBehaviour = value;        }        public function set spriteClip(value:MovieClip):void {            if (_spriteClip) removeChild(_spriteClip);            _spriteClip = value;            addChild(_spriteClip);        }        public function set trailClipClass(value:String):void {            _trailClipClass = value;        }		public function set deathClipClass(value:String):void {			_deathClipClass = value;		}        public function set trailStep(value:int):void {            _trailStep = value;        }        public function set lifeSpan(value:int):void {            _lifeSpan = value;        }        public function set group(value:Object):void {            _group = value;        }        public function get startPt():Point {            return _startPt;        }        public function get endPt():Point {            return _endPt;        }        public function get group():Object {            return _group;        }        public function set field(value:Sprite):void {            _field = value;        }        public function Projectile(field:Sprite, startPt:Point, endPt:Point) {            _field = field;            _startPt = startPt;            _endPt = endPt;            _birthTime = (new Date()).getTime();            x = _startPt.x;            y = _startPt.y;            super();        }        public function update():void {            if (_dead) return;                        var moveObj:Object = _movementBehaviour.move(this);            Utilities.rocket(this, moveObj, ["x", "y", "rotation", "scaleX", "scaleY"]);            if (moveObj.reachedEndPt) {                die();            }            var thisTime:int = (new Date()).getTime();            if (thisTime > _lastTrail + _trailStep) {                addTrail();            }            if (thisTime > _birthTime + _lifeSpan) {                die();            }        }        protected function die():void {            _dead = true;            if (_deathClipClass) {                var deathClip:MovieClip = Utilities.classInstanceFromString(_deathClipClass) as MovieClip;				GameEvent.addAnimFrameListener(deathClip, deathComplete, "die");				GameEvent.addAnimFrameListener(deathClip, deathAnimComplete);				deathClip.x = x; deathClip.y = y;                _field.addChild(deathClip);            } else {				deathComplete();			}        }				protected function deathComplete(e:GameEvent=null):void {            dispatchEvent(new GameEvent(GameEvent.PROJECTILE_DIED, this));		}				protected function deathAnimComplete(e:GameEvent):void {			_field.removeChild(e.target as MovieClip);		}        protected function addTrail():void {            if (!_trailClipClass) return;            var trailClip:Sprite = Utilities.classInstanceFromString(_trailClipClass) as Sprite;            addChild(trailClip);        }    }}