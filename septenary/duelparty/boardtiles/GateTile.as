package septenary.duelparty.boardtiles {    import flash.display.MovieClip;    import septenary.duelparty.*;    public class GateTile extends BoardTile {        protected var _gateCost:int = 10;        protected var _gateDirForward:Boolean = true;        protected var _freeTilesOut:Array;        protected var _freeTilesIn:Array;        protected var _farePaid:Boolean = false;        protected var _gateAnim:MovieClip;        public function get gateCost():int {            return _gateCost;        }        public function set gateCost(value:int):void {            _gateCost = value;        }        public function get gateDirForward():Boolean {            return _gateDirForward;        }        public function set gateDirForward(value:Boolean):void {            _gateDirForward = value;        }        public static function getParamFields():Array {            return ["gateCost", "gateDirForward"];        }        public function GateTile() {            super();            _activateOnPass = true;            _reducesMoveCount = false;        }        public override function setup():void {            _freeTilesOut = _tilesOut.slice(1);            _freeTilesIn = _tilesIn.slice(1);            setupGateAnim();        }        public override function activate(player:Player, onPass:Boolean=false):void {            super.activate(player);            if (player.movement.moveDirForward != _gateDirForward) {                activateDone(player);                return;            }            function payOrNot(e:GameEvent):void {                if (e.data.yes) {                    GameEvent.addOneTimeEventListener(player, GameEvent.PLAYER_COINS_MODIFIED, playerCoinsTaken);                    player.takeCoins(_gateCost);                } else {                    activateDone(player);                }            }            _farePaid = false;            if (player.coins >= _gateCost) {                Singleton.get(GameInterface).showDialogBox(DialogBox.YES_NO_SHOP,                    {speaker:"Gate Tile", dialog:"Pay me " + _gateCost + " moneh to pass.", player:player,                     cost:_gateCost},                    payOrNot);            } else {                Singleton.get(GameInterface).showDialogBox(DialogBox.DIALOG_ONLY,                    {speaker:"Gate Tile", dialog:"You need " + _gateCost + " moneh to pass.  You don't have enough!",                     player:player}, payOrNot);            }        }        protected function playerCoinsTaken(e:GameEvent):void {            Singleton.get(GameInterface).showDialogBox(DialogBox.DIALOG_ONLY,                {speaker:"Gate Tile", dialog:"Hah!  You gots scammed!", player:e.target}, openGate);        }        public override function getTilesInDir(forward:Boolean):Array {			if (forward) {                if (_farePaid || !gateDirForward) {				    return _tilesOut;                } else {                    return _freeTilesOut;                }			} else {			    if (_farePaid || gateDirForward) {			        return _tilesIn;                } else {                    return _freeTilesIn;                }            }		}        public override function arrive(fightable:Fightmaster):void {            super.arrive(fightable);            var gatedTile:BoardTile = _gateDirForward ? _tilesOut[0] : _tilesIn[0];            var gateRot:Number = Math.atan2(gatedTile.y - y, gatedTile.x - x) * 180/Math.PI;            var playerRot:Number = Math.atan2((fightable as MovieClip).y - y, (fightable as MovieClip).x - x)                                     * 180/Math.PI;            if (gateRot == playerRot) {                openGate();            }        }        public override function depart(fightable:Fightmaster):void {            super.depart(fightable);            if (_farePaid) {                _farePaid = false;                closeGate();            }        }        protected function setupGateAnim():void {            var gatedTile:BoardTile = _gateDirForward ? _tilesOut[0] : _tilesIn[0];            _gateAnim = new GateAnim();            _gateAnim.x = x;            _gateAnim.y = y;            _gateAnim.rotation = Math.atan2(gatedTile.y - y, gatedTile.x - x) * 180/Math.PI;            _gateAnim.stop();            Singleton.get(GameBoard).addChildToField(_gateAnim);        }        protected function openGate(e:GameEvent=null):void {            function gateOpened(e:GameEvent):void {                _gateAnim.stop();                _farePaid = true;                activateDone(e.target as Player);            }            GameEvent.addAnimFrameListener(_gateAnim, gateOpened, "gateOpened");            _gateAnim.gotoAndPlay("openGate");        }        protected function closeGate():void {            function gateClosed(e:GameEvent):void {                _gateAnim.gotoAndStop("init");            }            GameEvent.addAnimFrameListener(_gateAnim, gateClosed, "gateClosed");            _gateAnim.gotoAndPlay("closeGate");        }    }}