package septenary.duelparty {    import flash.display.Sprite;    import flash.display.MovieClip;    import flash.utils.setTimeout;	import com.greensock.TweenLite;		public class BlackTransition extends Screen {        public static const TRANSITION_SHAPE_CIRCLE:String = "TransitionShapeCircle";				protected static var _activeTransition:BlackTransition;        protected var _masked:Sprite;        protected var _transDelay:Number;        protected var _transTime:Number;		public static function getBlackTransition():BlackTransition {			return _activeTransition;		}		public function BlackTransition() {            _alwaysOnTop = true;			_activeTransition = this;		}        public function setMasked(masked:Sprite):void {            if (_masked != null && _masked.mask != null) removeMask();            _masked = masked;            }				public function transition(inShape:String, outShape:String, transDelay:Number=800, transTime:Number=700):void {			const smallScale:Number = 0.01;            _transDelay = transDelay;            _transTime = transTime/1000;            var inMask:Sprite = addMask(inShape);			TweenLite.to(inMask, _transTime, {scaleX:smallScale, scaleY:smallScale, onComplete:transitionInDone,                                             onCompleteParams:[outShape]});		}				protected function transitionInDone(outShape:String):void {            const offScreen:Number = -100000;            getChildAt(0).x = offScreen;            setTimeout(transitionOut, _transDelay, outShape);		}        protected function transitionOut(outShape:String):void {            dispatchEvent(new GameEvent(GameEvent.SCREEN_TRANSITIONED));            var outMask:Sprite = addMask(outShape, false);            var finalSize:Number = getMaskLargeSize(outShape);            TweenLite.to(outMask, _transTime, {scaleX:finalSize, scaleY:finalSize, onComplete:transitionOutDone});        }				protected function transitionOutDone():void {            const transDelay:Number = 1 * 1000;            removeMask();            function actionComplete():void {                dispatchEvent(new GameEvent(GameEvent.ACTION_COMPLETE));            }            setTimeout(actionComplete, transDelay);		}        protected function addMask(shape:String, startLarge:Boolean=true):Sprite {			const smallScale:Number = 0.01;            removeMask();			var newMask:Sprite = Utilities.classInstanceFromString(shape);			newMask.x = DuelParty.stageWidth/2;            newMask.y = DuelParty.stageHeight/2;            _masked.mask = newMask;			addChild(newMask);            if (startLarge) {                var size:Number = getMaskLargeSize(shape);                newMask.scaleX = newMask.scaleY = size;            } else {                newMask.scaleX = newMask.scaleY = smallScale;            }                        return newMask;		}        protected function removeAllChildren():void {            while (numChildren > 0) removeChildAt(0);        }        protected function removeMask():void {            _masked.mask = null;            removeAllChildren();        }        protected function getMaskLargeSize(shape:String):Number {			var testMask:MovieClip = Utilities.classInstanceFromString(shape);            return Math.max(DuelParty.stageWidth/testMask.outline.width, DuelParty.stageHeight/testMask.outline.height);        }	}}