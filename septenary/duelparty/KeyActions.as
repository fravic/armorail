package septenary.duelparty {	import flash.display.Stage;    import flash.ui.Keyboard;	import flash.events.EventDispatcher;	import flash.events.KeyboardEvent;	public class KeyActions extends EventDispatcher {		protected static var _keyDownListeners:Object = new Object();		protected static var _keyUpListeners:Object = new Object();        protected static var _dataParams:Object = new Object();		protected static var _keysDown:Array = new Array();		protected static var _stageRef:Stage;				public static function initialize(stageRef:Stage = null):void {			stageRef.addEventListener(KeyboardEvent.KEY_DOWN, keyDownListener, false, 0, true);			stageRef.addEventListener(KeyboardEvent.KEY_UP, keyUpListener, false, 0, true);			_stageRef = stageRef;		}        public static function addArrowKeyListeners(callback:Function, down:Boolean=true):void {            var keyCodes:Array = [Keyboard.LEFT, Keyboard.RIGHT, Keyboard.UP, Keyboard.DOWN];            for (var i:int = 0; i < keyCodes.length; i++) {                addEventListener(keyCodes[i], callback, down, true);            }        }        public static function removeArrowKeyListeners(down:Boolean=true):void {            var keyCodes:Array = [Keyboard.LEFT, Keyboard.RIGHT, Keyboard.UP, Keyboard.DOWN];            for (var i:int = 0; i < keyCodes.length; i++) {                removeEventListener(keyCodes[i], down);            }        }				public static function addEventListener(keyCode:int, callback:Function, down:Boolean=true,                                                dataParams:Boolean=false):void {			if (down) {				_keyDownListeners[keyCode] = callback;			} else {				_keyUpListeners[keyCode] = callback ;			}            _dataParams[keyCode] = dataParams;		}				public static function removeEventListener(keyCode:int, down:Boolean=true):void {			if (down) {				_keyDownListeners[keyCode] = null;			} else {				_keyUpListeners[keyCode] = null;			}            _dataParams[keyCode] = false;		}				protected static function keyDownListener(e:KeyboardEvent):void {			var keyCode:uint = e.keyCode;			if (_keysDown[keyCode]) return;			if (_keyDownListeners[keyCode]) {				if (_dataParams[keyCode]) {                    _keyDownListeners[keyCode](keyCode, true);                } else {                    _keyDownListeners[keyCode]();                }			}			_keysDown[keyCode] = true;		}				protected static function keyUpListener(e:KeyboardEvent):void {			var keyCode:uint = e.keyCode;			if (_keyUpListeners[keyCode]) {				if (_dataParams[keyCode]) {                    _keyUpListeners[keyCode](keyCode, false);                } else {                    _keyUpListeners[keyCode]();                }			}			_keysDown[keyCode] = false;		}				public static function keyIsDown(keyCode:int):Boolean {			return _keysDown[keyCode];		}	}}