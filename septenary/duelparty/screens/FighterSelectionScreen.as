package septenary.duelparty.screens {    import septenary.duelparty.*;	import flash.display.Sprite;	import flash.events.MouseEvent;	public class FighterSelectionScreen extends NetScreen {        protected var _fighter:Fighter;				public function FighterSelectionScreen(player:Player, fighter:Fighter) {            super(player);            _fighter = fighter;            infoNew.setFighterInfo(fighter);            infoFront.setFighterInfo(player.foreGuard);            infoBack.setFighterInfo(player.rearGuard);						btnReplaceFront.lbl.text = btnReplaceBack.lbl.text = "Replace Weapon";            centerScreen();		}        protected function replaceBtnHandler(e:MouseEvent):void {            replaceFighter(e.target == btnReplaceFront);        }        protected function replaceFighter(onFront:Boolean):void {            if (onFront) {                _player.setFighter(_fighter, true);            } else {                _player.setFighter(_fighter, false);            }            if (this.hasPlayerFocus() && _player != null) {                Singleton.get(NetworkManager).sendMessage(NetworkMessage.DIALOG_BOX,                    {playerNetID:_player.playerData.netID, type:(onFront ? AIBehaviour.AI_REPLACE_FRONT_WEAPON :                     AIBehaviour.AI_REPLACE_BACK_WEAPON)});            }            dispatchEvent(new GameEvent(GameEvent.ACTION_COMPLETE));        }        protected function aiHandler(e:GameEvent):void {            navigateToAndSelectFocusable(e.data.action.type == AIBehaviour.AI_REPLACE_FRONT_WEAPON ?                                         btnReplaceFront : btnReplaceBack);        }        protected function netMessageHandler(e:GameEvent):void {            if (e.data.type == NetworkMessage.DIALOG_BOX && e.data.vars.playerNetID == _player.playerData.netID) {                Singleton.get(NetworkManager).claimMessage(e.data);                var syntheticEvent:GameEvent = new GameEvent(GameEvent.NETWORK_MESSAGE,                    {action:{type:e.data.vars.type}});                aiHandler(syntheticEvent);            }        }				protected override function gainedPlayerFocus():void {            super.gainedPlayerFocus();            getFocusManager().addGeneralFocusableListener(this, replaceBtnHandler);        }				protected override function lostPlayerFocus():void {            super.lostPlayerFocus();            getFocusManager()                    .removeGeneralFocusableListener(this, replaceBtnHandler);		}        protected override function gainedAIFocus():void {            super.gainedAIFocus();            getFocusManager().addGeneralFocusableListener(this, replaceBtnHandler);            GameEvent.addOneTimeEventListener(_player.ai, GameEvent.ACTION_COMPLETE, aiHandler);            _player.ai.think([{type:AIBehaviour.AI_REPLACE_FRONT_WEAPON}, {type:AIBehaviour.AI_REPLACE_BACK_WEAPON}]);        }        protected override function lostAIFocus():void {            super.lostAIFocus();            getFocusManager().removeGeneralFocusableListener(this, replaceBtnHandler);        }        protected override function gainedNetFocus():void {            super.gainedNetFocus();            getFocusManager().addGeneralFocusableListener(this, replaceBtnHandler);			Singleton.get(NetworkManager).addEventListener(GameEvent.NETWORK_MESSAGE, netMessageHandler);            Singleton.get(NetworkManager).dispatchQueuedMessages();        }        protected override function lostNetFocus():void {            super.lostNetFocus();            getFocusManager().removeGeneralFocusableListener(this, replaceBtnHandler);			Singleton.get(NetworkManager).removeEventListener(GameEvent.NETWORK_MESSAGE, netMessageHandler);        }	}}