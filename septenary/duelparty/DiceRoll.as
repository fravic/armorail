package septenary.duelparty {	import flash.events.MouseEvent;	import flash.geom.Point;    import com.greensock.TweenLite;    import com.greensock.easing.Elastic;    import org.flintparticles.common.counters.*;    import org.flintparticles.common.initializers.*;    import org.flintparticles.common.actions.*;    import org.flintparticles.twoD.actions.*;    import org.flintparticles.twoD.emitters.Emitter2D;    import org.flintparticles.twoD.initializers.*;    import org.flintparticles.twoD.renderers.*;    import org.flintparticles.twoD.zones.*;	public class DiceRoll extends NetScreen {        protected const DICE_ROLL_MAX:int = 8;	    protected const DICE_ROLL_MIN:int = 1;		protected var _currentRoll:int;		protected var _incrementTicks:int = 0;        protected var _restrict:Array = new Array();        protected var _running:Boolean = true;        protected var _wheelRotSpeed:Number = 70;				public function DiceRoll(player:Player) {            const yOffset:Number = - 70;			super(player);            x = _player.x;            y = _player.y + yOffset;			setRandomDiceRoll();                        if (_player.playerData.inputSource == NetScreen.PLAYER_INPUT) {                diceButton.addEventListener(MouseEvent.MOUSE_UP, diceButtonClicked);                diceButton.flashLevel = Focusable.NO_FLASH;                diceButton.buttonMode = true;                roll.mouseEnabled = false;            }	            animateIn();		}        public function restrictRollNumbers(nums:Array):void {            for (var i:int = 0; i < nums.length; i++) {                _restrict[nums[i]] = true;            }        }				public override function update():void {			const DICE_ROLL_INTERVAL:int = 50;			const TICKS_PER_INCREMENT:int = Math.ceil(DICE_ROLL_INTERVAL / DuelParty.UPDATE_INTERVAL);            if (!_running) return;			if (_incrementTicks >= TICKS_PER_INCREMENT) {				setRandomDiceRoll();				_incrementTicks = 0;			}else{				_incrementTicks++;			}            diceButton.wheel.rotation += _wheelRotSpeed;		}        protected function animateIn():void {            const startScale:Number = 0.4;            const animTime:Number = 0.4;            this.scaleX = this.scaleY = startScale;            TweenLite.to(this, animTime, {scaleX:1, scaleY:1, ease:Elastic.easeOut});        }        protected function setRandomDiceRoll():void {            var lastRoll:Number = _currentRoll;			while (_currentRoll == lastRoll) {                setDiceRoll( Math.floor(Math.random() * DICE_ROLL_MAX) + DICE_ROLL_MIN);            }        }        protected function setDiceRoll(num:int):void {            _currentRoll = num;            roll.text = num.toString();        }				protected function diceButtonClicked(e:MouseEvent):void {			endDiceRoll();		}				protected function netDiceRoll(netObject:Object):void {			_currentRoll = netObject["diceRoll"];			endDiceRoll();		}				protected function endDiceRoll():void {            const diceBounceTime:Number = 0.4;            const diceBounceScale:Number = 0.1;            _running = false;                        while (_restrict[_currentRoll]) {                setRandomDiceRoll();            }            function diceRollEnded():void {                dismissDiceRoll();            }            TweenLite.to(this, diceBounceTime, {alpha:0, scaleX:diceBounceScale, scaleY:diceBounceScale,                                                ease:Elastic.easeInOut, onComplete:diceRollEnded});            if (this.hasPlayerFocus()) {                Singleton.get(NetworkManager).sendMessage(NetworkMessage.DICE_ROLL,                                                   {playerNetID:_player.playerData.netID, roll:_currentRoll});            }            /*var particleRender:DisplayObjectRenderer = new DisplayObjectRenderer();            var emitter:Emitter2D = sparksParticles();            particleRender.addEmitter(emitter);            particleRender.y = diceButton.height/2;            addChild(particleRender);*/		}        /*protected function sparksParticles():Emitter2D {            const particlesPerSecond:int = 100;            const minLifetime:Number = 0.5;            const maxLifetime:Number = 1.0;            const minXVelo:Number = -1000;            const maxXVelo:Number = -500;            const minYVelo:Number = -500;            const maxYVelo:Number = -100;            const minAlpha:Number = 0.1;            const maxAlpha:Number = 0.9;            const particleY:Number = 12;            const particleX:Number = 10;            var emitter:Emitter2D = new Emitter2D();            emitter.counter = new Blast(particlesPerSecond);            emitter.addInitializer(new ImageClass(SparkParticle));            emitter.addInitializer(new Position(new PointZone(new Point(particleX, particleY))));            emitter.addInitializer(new Velocity(new RectangleZone(minXVelo, minYVelo, maxXVelo, maxYVelo)));            emitter.addInitializer(new Rotation(0, 2*Math.PI));            emitter.addInitializer(new Lifetime(minLifetime, maxLifetime));            emitter.addAction(new Move());            emitter.addAction(new Age());            emitter.addAction(new Fade(Math.random() * (maxAlpha - minAlpha) + minAlpha, 0));            emitter.start();            return emitter;        }*/        protected function dismissDiceRoll(e:GameEvent=null):void {			dispatchEvent(new GameEvent(GameEvent.ACTION_COMPLETE, {player:_player, roll:_currentRoll}));        }        protected function aiHandler(e:GameEvent):void {            endDiceRoll();        }        protected function netMessageHandler(e:GameEvent):void {            trace("DICE ROLL PARSING NET MESSAGE TYPE:", e.data.type, e.data.netData.playerNetID, _player.playerData.netID);            if (e.data.type == NetworkMessage.DICE_ROLL && e.data.netData.playerNetID == _player.playerData.netID) {                Singleton.get(NetworkManager).claimMessage(e.data.message);                setDiceRoll(e.data.netData.roll);                endDiceRoll();            }        }		protected override function gainedPlayerFocus():void {            super.gainedPlayerFocus();			getFocusManager().switchFocus(diceButton);		}        protected override function gainedAIFocus():void {            super.gainedAIFocus();            GameEvent.addOneTimeEventListener(_player.ai, GameEvent.ACTION_COMPLETE, aiHandler);            _player.ai.think([{type:AIBehaviour.AI_DICE_ROLL}]);        }				protected override function gainedNetFocus():void {			Singleton.get(NetworkManager).addEventListener(GameEvent.NETWORK_MESSAGE, netMessageHandler);            Singleton.get(NetworkManager).dispatchQueuedMessages();		}        protected override function lostNetFocus():void {			Singleton.get(NetworkManager).removeEventListener(GameEvent.NETWORK_MESSAGE, netMessageHandler);        }	}}